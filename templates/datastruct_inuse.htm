<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>数据结构课设</title>
        <!-- 导入jquery -->
        <script src=" http://127.0.0.1:5000/get_file/jquery-3.4.1.min.js"> </script>
        <!-- 导入算法 -->
        <script src="http://127.0.0.1:5000/get_file/datastruct_TSP.js"></script>
        <!-- 高德地图api -->
        <script src="https://webapi.amap.com/maps?v=1.4.15&key=6a159ce0aac34e52264dcc63bb7bfeca&plugin=AMap.Walking""></script>
        <script src=" https://a.amap.com/jsapi_demos/static/demo-center/js/demoutils.js"> </script> <script
            type="text/javascript" src="https://cache.amap.com/lbs/static/addToolbar.js"></script>
        <script src="https://a.amap.com/jsapi_demos/static/demo-center/js/demoutils.js"></script>
        <style>
            #container {
                height: 1000px;
                width: 1000px;
            }

            .info {
                padding: .75rem 1.25rem;
                margin-bottom: 1rem;
                border-radius: .25rem;
                position: fixed;
                top: 1rem;
                background-color: #ffffff;
                width: auto;
                min-width: 22rem;
                border-width: 0;
                right: 1rem;
                box-shadow: 0 2px 6px 0 rgba(114, 124, 245, .5);
            }

            .staytime {
                width: 80px;
            }
        </style>
    </head>

    <body>
        <!-- <div>
                经纬度<input type="text" readonly="true" id="lnglat">
            </div>  -->
        <div class="info">
            <div>
                <div>
                    <input id="addMarker" type="checkbox" value="添加点标记">添加点标记 <br>
                </div>
                <div>
                    <button id="delMarker"> 删除点标记</button> <br>

                    <button id="computedistance">计算点之间的距离</button> <br>
                </div>
                <div>
                    出发时间<input type="time" name="" id="starttime">
                </div>
                <div>
                    结束时间<input type="time" name="" id="endtime">
                </div>
            </div>
            <div id="timeblock"></div>
            <!-- 时间信息 -->
        </div>
        <div id="container">

        </div>

        <script text="text/javascript">
            let bjutBound = [
                [116.477522, 39.879334],
                [116.483176, 39.879322],
                [116.483316, 39.878791],
                [116.484029, 39.877976],
                [116.485789, 39.87623],
                [116.486947, 39.875872],
                [116.489179, 39.875852],
                [116.48904, 39.874746],
                [116.488433, 39.873626],
                [116.48677, 39.872014],
                [116.485922, 39.871557],
                [116.483605, 39.871516],
                [116.479767, 39.871513],
                [116.477552, 39.871509],
                [116.477541, 39.872843],
                [116.47753, 39.875083],
                [116.477471, 39.877399]
            ]
            let markerArr = [] //点标记数组
            let positionArr = [] //经纬度数组

            //添加地图
            var map = new AMap.Map("container", {
                resizeEnable: true,
                zoom: 16, //级别
                center: [116.481932, 39.875403], //中心点坐标

            });
            //为地图注册click事件获取鼠标点击出的经纬度坐标
            map.on('click', function (e) {
                //document.getElementById("lnglat").value = e.lnglat.getLng() + ',' + e.lnglat.getLat()
                //如果添加标记
                let markerChecked = $('#addMarker').prop(
                    "checked") //let markerChecked = $(':checkbox')[0].checked
                //用户选择地点
                if (markerChecked) {
                    //根据地址新建点标记
                    let newMarker = new AMap.Marker({
                        position: [e.lnglat.getLng(), e.lnglat.getLat()],
                        //offset: new AMap.Pixel(-13, -30)
                    })
                    //设置新建marker的文本内容
                    newMarker.setLabel({
                        offset: new AMap.Pixel(20, 20),
                        content: "<div >第" + markerArr.length + "个点" +
                            '</br>停留时间(分钟)<input class="staytime" type="number" name="" ></br></div>', //设置文本标注内容
                        direction: 'middle' //设置文本标注方位
                    })
                    map.add(newMarker)

                    if (inBjut([e.lnglat.getLng(), e.lnglat.getLat()])) {
                        var tmp = new LngLatAndId()
                        tmp.lnglat = [e.lnglat.getLng(), e.lnglat.getLat()]
                        tmp.id = markerArr.length
                        positionArr.push(tmp)
                    }
                    markerArr.push(newMarker)
                }
            });

            //删除点
            $('#delMarker').on('click', function () {
                var e = markerArr.pop()
                map.remove(e) //删除点
                positionArr.pop()
            })

            let distanceMartix = [] //点之间距离矩阵
            //计算各个点之间的距离
            $('#computedistance').click(function () {
                $('#addMarker').prop("checked", false) //关闭添加点

                //时间
                var st = String($("#starttime").val()).split(":")
                var et = String($("#endtime").val()).split(":")
                var std = new Date()
                std.setHours(st[0], st[1])
                var etd = new Date()
                etd.setHours(et[0], et[1])
                var starttimeMillSecond = std.getTime()


                if (std >= etd) {
                    alert("输入时间错误")
                } else {

                    $('#addMarker').prop(
                        "unchecked")
                    var stlabel = $("input.staytime")
                    var stayTime = []
                    var totaltime = 0
                    for (let i = 0, len = stlabel.length; i < len; i++) {
                        stayTime.push(0 | stlabel[i].value) // string转number

                    }
                    console.log("time info", stayTime)

                    $('#addMarker').attr("checked", false)
                    if (positionArr.length <= 1) {
                        alert("请选择更多的点")
                    } else {
                        for (let i = 0; i < positionArr.length; i++) {
                            distanceMartix[i] = new Array(positionArr.length)
                        }
                        for (let i = 0; i < positionArr.length; i++) {
                            for (let j = i; j < positionArr.length; j++) {
                                var tmp = AMap.GeometryUtil.distance(positionArr[i].lnglat, positionArr[j]
                                    .lnglat)
                                distanceMartix[i][j] = tmp
                                distanceMartix[j][i] = tmp
                            }
                        }
                    }
                    //console.log("distance矩阵",distanceMartix)

                    //实际算法计算部分
                    let graph = new Graph()
                    graph.info = distanceMartix

                    //TSP 旅行商问题
                    let result = TSP(graph, 0)

                    console.log("result=", result)

                    //显示形式路径
                    let TSPAth = [] //TSPAth为结果经纬度顺序
                    for (var i = 0; i < result.length; i++) {
                        var index = result[i]
                        TSPAth.push(positionArr[index].lnglat)
                    }
                    console.log("position = ", positionArr)
                    console.log("TSPAth", TSPAth)
                    //显示折线
                    /*
                    var polyline = new AMap.Polyline({
                        path: TSPAth, //设置线覆盖物路径
                        showDir: true,
                        strokeColor: '#f01a1a', // 线颜色
                        strokeWeight: 10 // 线宽
                    });
                    map.add(polyline); 
                    */
                    //显示形式路径 end

                    //构造矩阵
                    $.ajax({
                        type: "post",
                        dataType: "json",
                        url: "http://127.0.0.1:5000/query", //请求后端传输数据
                        data: {
                            params: JSON.stringify()
                        },
                        success: function (data, textStatus, jqxhr) {
                            var lenJson = Object.keys(data).length
                            //console.log("lendata",lenJson)
                            var matrix = new Array()
                            for (let i = 0; i < lenJson; i++) {
                                matrix[i] = []
                                for (let j = 0; j < lenJson; j++) {
                                    matrix[i][j] = inf
                                }
                            }
                            for (var i in data) {
                                const val = data[i]
                                /*
                                var m1 = new AMap.Marker({
                                    map: map,
                                    draggable: true,
                                    position: new AMap.LngLat(val[0], val[1])
                                });
                                m1.setLabel({
                                    content: '<div>' + i +
                                        '</div>',
                                    direction: 'right' //设置文本标注方位
                                })
                                */
                                for (var j = 0; j < val[2].length; j++) {
                                    var a1 = [val[0], val[1]]
                                    var a2 = data[val[2][j]]
                                    var b = [a2[0], a2[1]]

                                    var dis = computeDis(a1, b)

                                    matrix[i][val[2][j]] = dis
                                    matrix[val[2][j]][i] = dis
                                }
                            }
                            console.log("my matrix", matrix)
                            //从TSPAth(经纬度数组)计算离其距离最近数组

                            var mapPonit = new Map()
                            var sendtoServer = []
                            for (var i = 0, n = TSPAth.length; i < n; i++) {
                                var j = 0
                                var minDis = computeDis([data[0][0], data[0][1]], TSPAth[i])
                                for (var k in data) {
                                    var tmppDis = computeDis([data[k][0], data[k][1]], TSPAth[i])
                                    if (minDis > tmppDis) {
                                        minDis = tmppDis
                                        j = 0 | k //保证j为数字
                                    }
                                }
                                mapPonit[positionArr[result[i]].id] = j
                                sendtoServer.push(j)
                            }

                            console.log("finnal map", mapPonit)
                            console.log("finnal send to server array", sendtoServer)
                            $.ajax({
                                type: 'post',
                                dataType: 'json',
                                data: JSON.stringify(sendtoServer),
                                url: "http://127.0.0.1:5000/data",
                                success: function (data2, textStatus, jqxhr) {
                                    console.log("data2 from server = ", data2)
                                    var pol_line = []
                                    for (var i = 0; i < data2[0].length; i++) {
                                        tmp = data2[0][i]
                                        pol_line.push([data[tmp][0], data[tmp][1]])
                                    }

                                    $("#timeblock").empty()

                                    for (var i = 0; i < result.length - 1; i++) {
                                        var point1 = positionArr[result[i]].id
                                        var point2 = positionArr[result[i + 1]].id
                                        console.log("point1,point2",[point1,point2])
                                        std.setMilliseconds(std.getMilliseconds() +
                                            stayTime[point1] * 60 * 1000
                                        )
                                        totaltime += stayTime[point1] * 60 * 1000
                                        var str = "点" + point1 + "-->点" + point2 
                                        var str2 =
                                            std.getHours() + ":" + checkTime(std
                                                .getMinutes()) + "-->" + data2[1][
                                                mapPonit[point2]
                                            ]+'min-->'
                                        std.setMilliseconds(std.getMilliseconds() +
                                            data2[1][mapPonit[point2]] * 60 * 1000)
                                        totaltime += data2[1][mapPonit[point2]] * 60 *1000
                                        str2 += std.getHours() + " : " + checkTime(std.getMinutes())
                                        
                                        $("#timeblock").append('<li>'+str+'</li>')
                                        $("#timeblock").append('<li>'+str2+'</li>')

                                    }
                                    console.log("line=", pol_line)
                                    var routeLine2 = new AMap.Polyline({
                                        path: pol_line,
                                        showDir: true,
                                        strokeColor: '#000fff', // 线颜色
                                        strokeWeight: 10 // 线宽
                                    })
                                    //添加到图层上
                                    map.add(routeLine2)
                                    console.log("starttime", starttimeMillSecond)
                                    console.log("totaltime", totaltime)
                                    if (starttimeMillSecond + totaltime > etd
                                        .getTime()) {
                                        alert("超过了结束时间,请更改停留时间,但仍然显示路径")
                                    }
                                }
                            })
                        }

                    })
                }
            })

            function computeDis(l1, l2) {
                return AMap.GeometryUtil.distance(l1, l2);
            }

            function checkTime(i) {
                if (i < 10) {
                    i = "0" + i
                }
                return i
            }

            function inBjut(lnglat) {
                return AMap.GeometryUtil.isPointInRing(lnglat, bjutBound)
            }

            function LngLatAndId() {
                this.lnglat = []
                this.id = -1
            }
        </script>
    </body>

</html>