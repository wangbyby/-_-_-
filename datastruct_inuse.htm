<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Document</title>

        <!-- 导入高德 -->
        <script src="https://webapi.amap.com/maps?v=1.4.15&key=6a159ce0aac34e52264dcc63bb7bfeca&plugin=AMap.Walking""></script>
        <!-- 导入jquery -->
        <script src=" jquery-3.4.1.min.js"></script>
        <!-- 导入算法 -->
        <script src="datastruct_TSP.js"></script>
        <script src="https://a.amap.com/jsapi_demos/static/demo-center/js/demoutils.js"></script>
        <script type="text/javascript" src="https://cache.amap.com/lbs/static/addToolbar.js"></script>
        <script src="https://a.amap.com/jsapi_demos/static/demo-center/js/demoutils.js"></script>
        <style>
            #container {
                width: 900px;
                height: 900px;
            }
        </style>
    </head>

    <body>
        <div>
            <div>

                <div>
                    <input id="addMarker" type="checkbox" value="添加点标记">添加点标记 <br>
                </div>
                <div>
                    <button id="delMarker"> 删除点标记</button> <br>

                    <button id="computedistance">计算点之间的距离</button> <br>
                </div>
                <div>
                    出发时间<input type="time" name="" id="starttime">
                </div>
            </div>
            <div>

                经纬度<input type="text" readonly="true" id="lnglat">
            </div>

        </div>
        <div id="container">


        </div>
        <div id="panel"></div>
        <script text="text/javascript">
            let markerArr = [] //点标记数组
            let positionArr = [] //经纬度数组

            //添加地图
            var map = new AMap.Map("container", {
                resizeEnable: true,
                zoom: 16, //级别
                center: [116.481932, 39.875403], //中心点坐标

            });
            //为地图注册click事件获取鼠标点击出的经纬度坐标
            map.on('click', function (e) {
                document.getElementById("lnglat").value = e.lnglat.getLng() + ',' + e.lnglat.getLat()

                //如果添加标记

                let markerChecked = $('#addMarker').prop(
                    "checked") //let markerChecked = $(':checkbox')[0].checked

                if (markerChecked) {
                    //根据地址新建点标记
                    let newMarker = new AMap.Marker({
                        position: [e.lnglat.getLng(), e.lnglat.getLat()],
                        offset: new AMap.Pixel(-13, -30)
                    })
                    //设置新建marker的文本内容
                    newMarker.setLabel({
                        offset: new AMap.Pixel(20, 20),
                        /*
                        content: "<div class='info'>第" + positionArr.length + "个点"+"经纬度"+ e.lnglat.getLng() + ',' + e.lnglat.getLat()+ '<br>' +
                            '停留时间(分钟)<input type="number" name="" id=""> </div>', //设置文本标注内容
                            */
                        content: "<div class='info'>第" + positionArr.length + "个点<br>"+"经纬度"+ e.lnglat.getLng() + ',' + e.lnglat.getLat()+ 
                            '</div>',
                        direction: 'right' //设置文本标注方位
                    })
                    map.add(newMarker)
                    positionArr.push([e.lnglat.getLng(), e.lnglat.getLat()])
                    markerArr.push(newMarker)

                    console.log("content", newMarker.content)
                }
            });

            //删除点
            $('#delMarker').on('click', function () {
                var e = markerArr.pop()
                map.remove(e) //删除点
                positionArr.pop()
            })

            let distanceMartix = [] //点之间距离矩阵
            //计算各个点之间的距离
            $('#computedistance').click(function () {
                //开始时间
                var st = $("#starttime").val()
                console.log("开始时间", st)


                var stlabel = $(".info input")
                var stvalue = []
                for (let i = 0, len = stlabel.length; i < len; i++) {
                    stvalue.push(0 | stlabel[i].value) // string转number
                }
                console.log("the info", stvalue)
                $('#addMarker').attr("checked", false)
                if (positionArr.length <= 1) {
                    alert("没必要呀")
                } else {
                    for (let i = 0; i < positionArr.length; i++) {
                        distanceMartix[i] = new Array(positionArr.length)
                    }
                    for (let i = 0; i < positionArr.length; i++) {

                        for (let j = i; j < positionArr.length; j++) {
                            var tmp = AMap.GeometryUtil.distance(positionArr[i], positionArr[j])
                            distanceMartix[i][j] = tmp
                            distanceMartix[j][i] = tmp

                        }
                    }
                }
                //console.log("distance矩阵",distanceMartix)

                //实际算法计算部分
                let graph = new Graph()
                graph.info = distanceMartix
                let result = TSP(graph, 0)
                console.log("result=", result)

                //显示路径
                let pathMap = []
                for (var i = 0; i < result.length; i++) {
                    var index = result[i]
                    var tmpPosition = positionArr[index]
                    pathMap.push(tmpPosition)
                }
                console.log("path", pathMap)
                //显示折线
                var polyline = new AMap.Polyline({
                    path: pathMap, //设置线覆盖物路径
                    showDir: true,
                    strokeColor: '#3366bb', // 线颜色
                    strokeWeight: 10 // 线宽
                });
                map.add(polyline);


                //行走路线



                var walking = new AMap.Walking({
                    map: map,
                    panel: "panel"
                });

                let viewPath = []
                let tmplength = pathMap.length
                for (let i = 0; i < tmplength; i++) {
                    let a1 = pathMap[i]
                    let a2 = pathMap[(i + 1) % tmplength]
                    //viewpath.push(a2)
                    //根据起终点坐标规划步行路线
                    console.log("step=", [
                        [a1.lng, a1.lat],
                        [a2.lng, a2.lat]
                    ])
                    walking.search([a1.lng, a1.lat], [a2.lng, a2.lat], function (status, result) {
                        if (status === 'complete') {
                            if (result.routes && result.routes.length) {
                                if (result.routes[0] in viewPath) {} else {
                                    viewPath = []
                                    ///routeLine
                                    //viewPath.push.apply(viewPath, result.routes[0].steps)
                                    for (let j = 0; j < result.routes[0].steps.length; j++) {
                                        let tmp_routes = result.routes[0].steps[j].path

                                        //console.log(result.routes[0].steps[j].path )
                                        for (let k = 0, lenk = tmp_routes.length; k < lenk; k++) {
                                            viewPath.push([tmp_routes[k].lng, tmp_routes[k].lat])
                                        }
                                        //viewPath.push.apply(viewPath,result.routes[0].steps[i].path )
                                    }

                                    //console.log( "sth want to know",viewPath)

                                    //将路线显示到地图上
                                    var routeLine = new AMap.Polyline({
                                        path: viewPath,
                                        showDir: true,
                                        strokeColor: '#00ffff', // 线颜色
                                        strokeWeight: 10 // 线宽

                                    })
                                    //添加到图层上
                                    map.add(routeLine)
                                    map.setFitView()
                                }
                            }
                            log.success('绘制步行路线完成')


                        } else {
                            log.error('步行路线数据查询失败' + result)
                        }

                    })

                }

            })



            /*
             //添加地图点标记
            let maker1 = new AMap.Marker({
                position: [116.47635359815848, 39.873590444308306],
            })
            map.add(maker1)

            //折线标记
            var lineArr = [
                [116.368904, 39.913423],
                [116.382122, 39.901176],
                [116.387271, 39.912501],
                [116.398258, 39.904600]
            ];
            var polyline = new AMap.Polyline({
                path: lineArr,          //设置线覆盖物路径
                strokeColor: "#3366FF", //线颜色
                strokeWeight: 5,        //线宽
                strokeStyle: "solid",   //线样式
            });
            map.add(polyline);
            var auto = new AMap.Autocomplete({
                input: "tipinput"
            });
            AMap.event.addListener(auto, "select", select); //注册监听，当选中某条记录时会触发
            function select(e) {
                if (e.poi && e.poi.location) {
                    map.setZoom(15);
                    map.setCenter(e.poi.location);
                }
            }
            
            //信息窗体
            var infoWindow = new AMap.InfoWindow({ //创建信息窗体
                isCustom: true, //使用自定义窗体
                content: '<div>信息窗体</div>', //信息窗体的内容可以是任意html片段
                offset: new AMap.Pixel(-20, -62)
            });
            var onMarkerClick = function (e) {
                infoWindow.open(map, e.target.getPosition()); //打开信息窗体
                //e.target就是被点击的Marker
            }
            maker1.on('click', onMarkerClick); //绑定click事件
*/
        </script>

    </body>

</html>